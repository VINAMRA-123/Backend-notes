<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSON/CSV Data Viewer</title>
    <style>
    </style>
</head>
<body>
    
    <h1>JSON/CSV Data Viewer</h1>

    <h2>Step 1: Upload a JSON or CSV File</h2>
    <input type="file" accept=".json, .csv" id="fileInput" onchange="handleFileUpload()">
    <div id="status"></div>

    <h2>Step 2: Specify Format</h2>
    <label for="fileType">File Type:</label>
    <select id="fileType">
        <option value="json">JSON</option>
        <option value="csv">CSV</option>
    </select>

    <label for="charEncoding">Character Encoding:</label>
    <input type="text" id="charEncoding">

    <label for="delimiter">Delimiter:</label>
    <input type="text" id="delimiter">

    <label for="hasHeader">Has Header:</label>
    <input type="checkbox" id="hasHeader">

    <button onclick="submitFormat()">Submit</button>
    <h2>Step 3: Display Handling</h2>
    <label for="availableFields">Available Fields:</label>
    <select id="availableFields" multiple>
        
    </select>

    <button onclick="addOption()">>></button>
    <button onclick="removeOption()"><</button>

    <label for="displayedFields">Fields Displayed:</label>
    <select id="displayedFields" multiple>
        
    </select>

    <button onclick="displayData()">Display the Data</button>

    <table id="dataTable"></table>

    <script>
        let fileData;
        let displayedFields = [];
        function handleFileUpload() {
            const fileInput = document.getElementById('fileInput');
            const statusDiv = document.getElementById('status');
            const file = fileInput.files[0];

            if (file) {
                statusDiv.textContent = `File selected: ${file.name}`;
                readDataFile(file);
            } else {
                statusDiv.textContent = 'No file selected';
            }
        }
            console.log('Has Header:', hasHeader);
        }

        function populateAvailableFields() {
    const availableFieldsSelect = document.getElementById('availableFields');
    availableFieldsSelect.innerHTML = '';
    if (fileData && Object.keys(fileData).length > 0) {
        const firstRecord = fileData[Object.keys(fileData)[0]];
        Object.keys(firstRecord).forEach(field => {
            const option = document.createElement('option');
            option.value = field;
            option.text = field;
            availableFieldsSelect.appendChild(option);
        });
    } else {
        console.error('No data available.');
    }
}


        function addOption() {
            const selectedValues = Array.from(document.getElementById('availableFields').selectedOptions).map(option => option.value);
            displayedFields.push(...selectedValues);
            updateFieldsLists();
        }

        function removeOption() {
            const selectedValues = Array.from(document.getElementById('displayedFields').selectedOptions).map(option => option.value);
            displayedFields = displayedFields.filter(field => !selectedValues.includes(field));
            updateFieldsLists();
        }

        function updateFieldsLists() {
            const availableFieldsSelect = document.getElementById('availableFields');
            const displayedFieldsSelect = document.getElementById('displayedFields');

            displayedFieldsSelect.innerHTML = '';
            Object.keys(fileData).forEach(field => {
                if (!displayedFields.includes(field)) {
                    const option = document.createElement('option');
                    option.value = field;
                    option.text = field;
                    availableFieldsSelect.appendChild(option);
                }
            });

            displayedFields.forEach(field => {
                const option = document.createElement('option');
                option.value = field;
                option.text = field;
                displayedFieldsSelect.appendChild(option);
            });
        }
function displayData() {
    if (!fileData) {
        console.error('No data available.');
        return;
    }

    const products = fileData;
    const productArray = Object.values(products);
    const popularityField = findFieldCaseInsensitive(productArray[0], 'popularity');

    if (!popularityField) {
        console.error('Popularity field is missing in the data.');
        return;
    }
    productArray.sort((a, b) => (b[popularityField] - a[popularityField]));
    console.log('Sorted Data:', productArray);

    const dataTable = document.getElementById('dataTable');
    dataTable.innerHTML = '';
    const tableHeader = document.createElement('tr');
    displayedFields.forEach(field => {
        const th = document.createElement('th');
        th.textContent = field;
        tableHeader.appendChild(th);
    });
    dataTable.appendChild(tableHeader);
    productArray.forEach(record => {
        const tr = document.createElement('tr');
        displayedFields.forEach(field => {
            const td = document.createElement('td');
            td.textContent = record[field];
            tr.appendChild(td);
        });
        dataTable.appendChild(tr);
    });

    console.log('Data Displayed .');
}
function findFieldCaseInsensitive(obj, targetField) {
    const fields = Object.keys(obj);
    const lowerTargetField = targetField.toLowerCase();
    return fields.find(field => field.toLowerCase() === lowerTargetField);
}
        function getFormatValues() {
            return {
                delimiter: document.getElementById('delimiter').value,
                hasHeader: document.getElementById('hasHeader').checked,
            };
        }
    </script>
</body>
</html>
